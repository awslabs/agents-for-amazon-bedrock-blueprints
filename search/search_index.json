{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Agent Blueprints for Amazon Bedrock aims to simplify the process of creating and deploying Agents for Amazon Bedrock, leveraging the power of AWS CDK (Cloud Development Kit) and <code>agent-blueprints</code> NPM module. Agent Blueprints are written in <code>TypeScript</code>, providing type safety and enhanced developer experience.</p>"},{"location":"#what-are-agent-blueprints","title":"What are Agent Blueprints?Why should I use Agent Blueprints?","text":"<p>Agent Blueprints are pre-configured templates designed to accelerate the development of <code>Agents for Amazon Bedrock</code>. These blueprints offer a streamlined approach to creating intelligent agents by providing optimized configurations and best practices tailored to specific use cases. By leveraging Agent Blueprints, developers can significantly reduce the time and effort required to build functional agents, allowing them to focus on fine-tuning and customizing the agent for their specific needs rather than starting from scratch.</p> <p>Each blueprint comes with predefined configurations, sample actions, and knowledge bases, making it easy for developers to experiment and learn about agent capabilities. Additionally, Agent Blueprints provide access to AWS-developed, use-case specific prompts that can save months of prompt engineering effort. This combination of ready-to-use templates and customizable components enables developers to quickly deploy sophisticated agents while maintaining the flexibility to adapt them to unique requirements.</p> <p>Agent Blueprints provide a flexible and streamlined approach to building agents for Amazon Bedrock, catering to different levels of customization and development effort. Whether you want to create a custom agent from scratch using constructs or quickly deploy a pre-built template.</p>"},{"location":"#key-features-and-benefits","title":"Key Features and BenefitsHow It Works","text":"<ul> <li>Curated, Pre-built Templates: A collection of templates optimized for popular use-case patterns among Amazon Bedrock customers.</li> <li>AWS CDK Integration: Utilize AWS CDK to define your agent infrastructure as code.</li> <li>Usecase Specific Configurations: Each blueprint comes with predefined configurations that you can use as-is or customize to your specific needs.</li> <li>Sample Actions and Knowledge Bases: Pre-configured examples that make it easy to experiment and learn about agent capabilities.</li> <li>Customized Prompts: Access to AWS-developed, use-case specific prompts that save months of prompt engineering effort.</li> <li>Easy to Follow Documentation: Each blueprint includes a documentation guide with step-by-step instructions for implementation.</li> <li>Flexibility: Easily modify and extend blueprints to meet your unique requirements.</li> <li>NPM Package: Core constructs are available as an NPM package for seamless integration into your projects.</li> <li>Open Source Blueprints: Access a growing library of blueprints via our GitHub repository.</li> <li>Cost Effective: Agent Blueprints are free to use; you only pay for the Amazon Bedrock resources you create and use.</li> <li>Rapid Development: Reduce development time from weeks to hours.</li> <li>Best Practices: Leverage optimized configurations and industry best practices.</li> </ul> <p>Regardless of the approach you choose, Agent Blueprints ensures a smooth development experience.</p> <p>Agent Blueprints for Amazon Bedrock has two main components to help you build agents:</p> <ol> <li> <p>Constructs: These are reusable building blocks that allow you to create a custom agent templates with specific configurations and options.</p> </li> <li> <p>Templates: These are pre-built agent templates that cover some of the most common use cases for Amazon Bedrock agents. These templates are ready to use, and can help create an agent in just a few minutes.</p> </li> </ol> <p>Using Constructs to Build Agents This flow is ideal to create a custom agent template with specific options and configurations. Use the provided constructs as building blocks to define agent's infrastructure, actions, knowledge bases, and other components. This approach offers more flexibility and customization. To learn more about using constructs to build Agents for Amazon Bedrock, click here.</p> <p>Using Templates to Build Agents This flow is ideal to quickly create an agent for Amazon Bedrock based on some of the most common use cases. The pre-built templates are ready to use, and you can have an agent up and running in just a few minutes. These templates are ready to use and they provide a great starting point to deploy an agent quickly. To learn more about using templates to build Agents for Amazon Bedrock, click here.</p> <p>Example Templates:  To view a library of blueprint examples, see our Blueprints Patterns Repository.</p>"},{"location":"UserGuide/","title":"Amazon\u00a0Bedrock\u00a0Agent\u00a0Blueprints\u00a0Construct","text":"<p>The\u00a0<code>BedrockAgentBlueprintsConstruct</code> is\u00a0a\u00a0high-level\u00a0construct\u00a0that\u00a0simplifies\u00a0the\u00a0process\u00a0of\u00a0creating\u00a0and\u00a0configuring\u00a0Amazon\u00a0Bedrock\u00a0agents.\u00a0It\u00a0provides\u00a0a\u00a0convenient\u00a0way\u00a0to\u00a0define\u00a0agent\u00a0properties,\u00a0action\u00a0groups,\u00a0knowledge\u00a0bases,\u00a0and\u00a0guardrails.</p>"},{"location":"UserGuide/#prerequisites","title":"Prerequisites","text":"<p>Before\u00a0you\u00a0can\u00a0use\u00a0the\u00a0<code>BedrockAgentBlueprintsConstruct</code>,\u00a0ensure\u00a0that\u00a0you\u00a0have\u00a0the\u00a0following: - An\u00a0AWS\u00a0account\u00a0with\u00a0the\u00a0necessary\u00a0permissions\u00a0to\u00a0create\u00a0and\u00a0manage\u00a0Bedrock\u00a0resources. - The\u00a0AWS\u00a0CDK\u00a0installed\u00a0and\u00a0configured\u00a0on\u00a0your\u00a0local\u00a0machine. - Node.js\u00a0and\u00a0npm\u00a0installed.</p>"},{"location":"UserGuide/#installation","title":"Installation","text":"<ol> <li>Create\u00a0a\u00a0new\u00a0CDK\u00a0project\u00a0or\u00a0navigate\u00a0to\u00a0an\u00a0existing\u00a0one.    </li> <li>Install\u00a0the\u00a0<code>BedrockAgentBlueprintsConstruct</code> package:</li> </ol> <pre><code>npm install @aws/agents-for-amazon-bedrock-blueprints\n</code></pre>"},{"location":"UserGuide/#usage","title":"Usage","text":"<p>Here's\u00a0an\u00a0example\u00a0of\u00a0how\u00a0to\u00a0use\u00a0the\u00a0<code>BedrockAgentBlueprintsConstruct</code> in\u00a0your\u00a0CDK\u00a0app:</p> <pre><code>import { App, Stack } from 'aws-cdk-lib';\nimport { AgentDefinitionBuilder } from './constructs/AgentDefinitionBuilder';\nimport { AgentActionGroup } from './constructs/AgentActionGroup';\nimport { BedrockAgentBlueprintsConstruct } from './BedrockAgentBlueprintsConstruct';\n\nconst app = new App();\nconst stack = new Stack(app, 'MyStack');\n\n// Define the agent properties\nconst agentDef = new AgentDefinitionBuilder(stack, 'NewAgentDef', {})\n  .withAgentName('MyFriendlyAgent')\n  .withInstruction('A helpful agent for coding tasks')\n  .build();\n\n// Define an action group\nconst action = new AgentActionGroup(stack, 'MyAction', {\n  actionName: 'CodeAction',\n  description: 'An action for generating code snippets',\n  lambdaDefinition: {\n    // Lambda function definition\n  },\n  schemaDefinition: {\n    // API schema definition\n  },\n});\n\n// Create the BedrockAgentBlueprintsConstruct\nnew BedrockAgentBlueprintsConstruct(stack, 'MyAgentBlueprint', {\n  agentDefinition: agentDef,\n  actionGroups: [action],\n});\n</code></pre> <p>In\u00a0this\u00a0example,\u00a0we\u00a0first\u00a0define\u00a0the\u00a0agent\u00a0properties\u00a0using\u00a0the\u00a0<code>AgentDefinitionBuilder</code>.\u00a0Then,\u00a0we\u00a0create\u00a0an\u00a0action\u00a0group\u00a0with\u00a0a\u00a0Lambda\u00a0function\u00a0and\u00a0API\u00a0schema\u00a0definition.\u00a0Finally,\u00a0we\u00a0instantiate\u00a0the\u00a0<code>BedrockAgentBlueprintsConstruct</code> and\u00a0pass\u00a0in\u00a0the\u00a0agent\u00a0definition\u00a0and\u00a0action\u00a0group. You\u00a0can\u00a0further\u00a0customize\u00a0the\u00a0agent\u00a0by\u00a0adding\u00a0knowledge\u00a0bases,\u00a0guardrails,\u00a0and\u00a0other\u00a0configurations.</p>"},{"location":"UserGuide/#features","title":"Features","text":"<p>The\u00a0<code>BedrockAgentBlueprintsConstruct</code> provides\u00a0several\u00a0customization\u00a0options:</p>"},{"location":"UserGuide/#opt-out-of-creating-knowledge-base-kb-resources","title":"Opt-out of creating knowledge base (KB) resources","text":"<p>Users can choose to opt-out of creating KB resources as it can become expensive to deploy the AOSS clusters for KB. If any template initializes KB, you can skip KB creation by adding a flag skipKBCreation in the CDK context.</p> <p>Example: <pre><code>cdk synth &lt;STACK_NAME&gt; --context skipKBCreation=true\n</code></pre></p>"},{"location":"UserGuide/#iam-role-management","title":"IAM Role Management","text":"<p>The <code>BedrockAgentBlueprintsConstruct' will automatically create and manage an IAM role for your Bedrock agent if you don't provide one. If you don't specify an</code>agentResourceRoleArn<code>in the</code>AgentDefinitionBuilder`, the construct will create a new IAM role with the necessary permissions for your agent. It will add required permissions for the ActionGroup invocation, FoundationModel access, KB access etc.</p> <p>However, if you prefer to use an existing IAM role, you can provide the ARN of that role using the <code>withAgentResourceRoleArn()</code> method in the <code>AgentDefinitionBuilder</code>.</p> <p>This also adds a resource policy to the Lambda functions associated with the provided action groups. The permission allows the 'bedrock.amazonaws.com' service principal to invoke the Lambda function, using the agent's ARN as the source ARN. This ensures that the Bedrock service can invoke the Lambda functions associated with the agent's action groups</p>"},{"location":"UserGuide/#asset-bucket-management","title":"Asset bucket management","text":"<p>The <code>BedrockAgentBlueprintsConstruct</code> automatically creates and manages Amazon S3 buckets for storing the contents of your knowledge bases and action groups. When you define a knowledge base using the <code>AgentKnowledgeBase</code>construct and add files from local store and/or when you use a file for defining schema for an action group using the <code>AgentActionGroup</code> construct the <code>BedrockAgentBlueprintsConstruct</code> creates an S3 bucket and uploads the specified asset files to it under separate folders. This feature simplifies the management of your agent's assets and ensures that they are securely stored and easily accessible by the corresponding AWS services. </p>"},{"location":"UserGuide/#helper-constructs","title":"Helper constructs","text":""},{"location":"UserGuide/#agent-definition","title":"Agent\u00a0Definition","text":"<p>The <code>AgentDefinitionBuilder</code>is a utility construct that simplifies the process of creating and configuring Amazon Bedrock agent definitions. It follows the builder pattern and uses composition to generate the <code>CfnAgentProps</code> required for creating a Bedrock agent.</p>"},{"location":"UserGuide/#generating-cfnagentprops","title":"Generating CfnAgentProps","text":"<p>The primary purpose of the <code>AgentDefinitionBuilder</code> is to generate the <code>CfnAgentProps</code> object, which is required for creating a Bedrock agent using the CfnAgent CDK construct. The builder provides a fluent interface for setting various properties of the agent definition, such as the agent name, instruction, foundation model, etc. Example: <pre><code>const agentDef = new AgentDefinitionBuilder(stack, 'NewAgentDef', {})\n  .withAgentName('MyAgent')\n  .withInstruction('My agent instructions to build a great agent')\n  .withFoundationModel('anthropic.claude-v2')\n  .withAgentResourceRoleArn('arn:aws:iam::123456789012:role/MyExistingRole')\n  .build();\n</code></pre></p>"},{"location":"UserGuide/#prompt-configuration","title":"Prompt Configuration","text":"<p>The <code>AgentDefinitionBuilder</code> simplifies the creation and configuration of prompts for your Bedrock agent. It provides methods for adding different types of prompts from the prompt library, such as pre-processing, post-processing, and response generation prompts.</p> <p><pre><code>const prompt: bedrock.CfnAgent.PromptConfigurationProperty = {\n  promptType: PromptType.PRE_PROCESSING,\n  promptCreationMode: PromptConfig_Default,\n  basePromptTemplate: 'This is a test prompt',\n};\n\nbuilder.withPreprocessingPrompt(prompt);\n</code></pre> The builder also includes validations to ensure that prompt configurations are valid and consistent. For example, it checks if the required fields are provided and prevents redefining the same prompt type.</p>"},{"location":"UserGuide/#user-input-action","title":"User Input Action","text":"<p>Creating a user input action group is not straightforward when using the AWS CLI or SDK. The <code>AgentDefinitionBuilder</code> simplifies this process by providing the <code>withUserInput()</code> method, which automatically creates and configures the necessary resources for a user input action group. <pre><code>const builder = new AgentDefinitionBuilder(stack, 'NewAgentDef', {});\nbuilder.withAgentName('MyAgent');\nbuilder.withUserInput();\n</code></pre></p> <p>This method adds the required action group, using parentActionGroupSignature as <code>AMAZON.UserInput</code></p>"},{"location":"UserGuide/#action-groups","title":"Action\u00a0Groups","text":"<p>The <code>AgentActionGroup</code> construct is a lightweight utility that allows you to define and configure action groups for your Amazon Bedrock agent. Action groups represent a set of actions that your agent can perform, and they are associated with a Lambda function and an API schema.</p>"},{"location":"UserGuide/#properties","title":"Properties","text":"<ul> <li>actionGroupName(required): The name of the action group.</li> <li>description(optional): A description of the action group.</li> <li>actionGroupExecutor(required): An object that defines the Lambda function responsible for executing the action group. This allows you to customize the Lambda function that will execute the action group. You can specify the following properties:</li> <li>lambdaDefinition: An object that defines the Lambda function code, handler, and runtime.<ul> <li>lambdaCode: The code for the Lambda function (e.g., an inline code buffer or a reference to a file).</li> <li>lambdaHandler: The handler function for the Lambda function.</li> <li>lambdaRuntime: The runtime environment for the Lambda function (e.g., nodejs18.x).</li> </ul> </li> <li>lambdaExecutor: Custom lambda function object that can directly be associated with an action.</li> <li>customControl: Constant string that will be returned to the user as a fixed response.</li> <li>NOTE: if all multiple params are defined lambdaExecutor will take precedence followed by lambdaDefinition then customControl.</li> <li>schemaDefinition(required): An object that allows you to define the API/Function schema for the action group. You can specify the schema in one of the following ways:</li> <li>inlineAPISchema: An inline API schema definition as a string.</li> <li>apiSchemaFile: A file buffer containing the API schema definition. The BedrockAgentBlueprintsConstruct will make a deployment to S3 and construct the URI params to link to the action.</li> <li>functionSchema: Defines functions that each define parameters that the agent needs to invoke from the user.</li> <li>actionGroupState(optional): The state of the action group (ENABLED or DISABLED).</li> <li>parentActionGroupSignature(optional): Used to define reserved actions.</li> </ul>"},{"location":"UserGuide/#example","title":"Example:","text":"<pre><code>const inlineCode = Buffer.from(\n    `\n        exports.handler = async (event) =&gt; {\n            return { message: process_stuff() };\n        };\n    `);\n\nconst fileBufferSchema: Buffer = readFileSync(resolve(__dirname, 'assets', 'openAPISchema.json'));\nconst action1 = new AgentActionGroup(this, 'NewAction', {\n    actionGroupName: 'DummyAction',\n    description: 'Dummy action for dummy agent',\n    actionGroupExecutor: {\n        lambdaDefinition: {\n            lambdaCode: inlineCode,\n            lambdaHandler: 'index.handler',\n            lambdaRuntime: Runtime.NODEJS_18_X\n        }\n    },\n    schemaDefinition: {\n        inlineAPISchema: fileBufferSchema.toString('utf8')\n    },\n});\n\nconst lambdaFunction = new Function(this, 'MyLambdaFunction', {\n      runtime: Runtime.NODEJS_14_X,\n      code: Code.fromInline(inlineCode.toStrint('utf8')),\n      handler: 'index.handler',\n    });\n\nconst action2 = new AgentActionGroup(this, 'NewAction', {\n    actionGroupName: 'DummyAction2',\n    description: 'Dummy action for dummy agent',\n    actionGroupExecutor: {\n        lambdaExecutor: lambdaFunction,\n    },\n    schemaDefinition: {\n        apiSchemaFile: fileBufferSchema,\n    },\n});\n\nconst action3 = new AgentActionGroup(this, 'NewAction', {\n    actionGroupName: 'DummyAction3',\n    description: 'Call this action when nothing is available',\n    actionGroupExecutor: {\n        customControl: 'Nothing is available',\n    }\n});\n\nnew BedrockAgentBlueprintsConstruct(stack, 'MyAgentBlueprint', {\n  agentDefinition: agentDef,\n  actionGroups: [action1, action2, action3],\n});\n</code></pre>"},{"location":"UserGuide/#knowledge-bases","title":"Knowledge\u00a0Bases","text":"<p>The\u00a0<code>AgentKnowledgeBase</code> construct\u00a0is\u00a0a\u00a0utility\u00a0class\u00a0that\u00a0simplifies\u00a0the\u00a0creation\u00a0and\u00a0management\u00a0of\u00a0Amazon\u00a0Bedrock\u00a0knowledge\u00a0bases.\u00a0A\u00a0knowledge\u00a0base\u00a0is\u00a0a\u00a0repository\u00a0of\u00a0information\u00a0that\u00a0can\u00a0be\u00a0used\u00a0to\u00a0train\u00a0and\u00a0enhance\u00a0the\u00a0capabilities\u00a0of\u00a0an\u00a0Agent. The\u00a0<code>AgentKnowledgeBase</code> construct\u00a0allows\u00a0you\u00a0to\u00a0configure\u00a0various\u00a0aspects\u00a0of\u00a0a\u00a0knowledge\u00a0base,\u00a0such\u00a0as\u00a0the\u00a0storage\u00a0configuration,\u00a0knowledge\u00a0base\u00a0type,\u00a0and\u00a0data\u00a0sources. To\u00a0create\u00a0a\u00a0basic\u00a0knowledge\u00a0base\u00a0with\u00a0default\u00a0settings,\u00a0you\u00a0can\u00a0use\u00a0the\u00a0following\u00a0code:</p> <pre><code>const kbProps = {\n  kbName: 'TestKB',\n  agentInstruction: 'Test instruction for the Knowledge Base',\n  assertFiles: [/* ... */], // Array of file buffers to include in the Knowledge Base\n};\n\nconst kb = new AgentKnowledgeBase(stack, 'TestKB', kbProps);\n</code></pre> <p>This\u00a0will\u00a0create\u00a0a\u00a0knowledge\u00a0base\u00a0with\u00a0the\u00a0name\u00a0'TestKB', set default\u00a0values\u00a0for\u00a0the\u00a0embedding model TITAN_EMBED_TEXT_V1 with AmazonOpenSearchServerless collection, and set default vector index.</p>"},{"location":"UserGuide/#customizing-knowledge-base-properties","title":"Customizing\u00a0Knowledge\u00a0Base\u00a0Properties","text":"<p>You\u00a0can\u00a0customize\u00a0various\u00a0properties\u00a0of\u00a0the\u00a0knowledge\u00a0base\u00a0by\u00a0passing\u00a0additional\u00a0options\u00a0to\u00a0the\u00a0<code>AgentKnowledgeBase</code> constructor:</p> <pre><code>const kbProps = {\n  kbName: 'TestKB',\n  agentInstruction: 'Test instruction for the Knowledge Base',\n  assertFiles: [/* ... */],\n  storageConfiguration: {\n    type: 'OPENSEARCH_SERVERLESS',\n    configuration: {\n      indexConfiguration: {...custom index config}\n    },\n  },\n  embeddingModel: BedrockKnowledgeBaseModels.TITAN_EMBED_TEXT_V1\n};\n\nconst kb = new AgentKnowledgeBase(stack, 'TestKB', kbProps);\n</code></pre>"},{"location":"UserGuide/#iam-role-management_1","title":"IAM Role Management","text":"<p><code>AgentKnowledgeBase</code> will create a service role to allow agent to access the KB and allow the KB to access the asset files in S3, permissions for accessing the AOSS collection, and indices and permissions for accessing the embedding models.</p>"},{"location":"UserGuide/#creating-and-synchronizing-data-sources","title":"Creating\u00a0and\u00a0Synchronizing\u00a0Data\u00a0Sources","text":"<p>The\u00a0<code>AgentKnowledgeBase</code> construct\u00a0provides\u00a0a\u00a0method\u00a0<code>createAndSyncDataSource</code> to\u00a0create\u00a0and\u00a0synchronize\u00a0data\u00a0sources\u00a0with\u00a0the\u00a0knowledge\u00a0base. Data\u00a0sources\u00a0can\u00a0be\u00a0Amazon\u00a0S3\u00a0buckets\u00a0or\u00a0folders\u00a0containing\u00a0the\u00a0information\u00a0you\u00a0want\u00a0to\u00a0include\u00a0in\u00a0the\u00a0Knowledge\u00a0Base. When we attach a knowledge base to the <code>BedrockAgentBlueprintsConstruct</code> it calls the <code>createAndSyncDataSource</code> to populate the knowledge base with the data in asset management bucket.</p>"},{"location":"UserGuide/#opensearchserverlesshelper","title":"OpenSearchServerlessHelper","text":"<p>The\u00a0<code>OpenSearchServerlessHelper</code> construct\u00a0is\u00a0a\u00a0utility\u00a0class\u00a0that\u00a0simplifies\u00a0the\u00a0creation\u00a0and\u00a0management\u00a0of\u00a0Amazon\u00a0OpenSearch\u00a0Serverless\u00a0collections\u00a0and\u00a0indices.\u00a0This\u00a0construct\u00a0is\u00a0used\u00a0internally\u00a0by\u00a0the\u00a0<code>AgentKnowledgeBase</code> construct\u00a0when\u00a0configuring\u00a0the\u00a0storage\u00a0configuration\u00a0with\u00a0OpenSearch\u00a0Serverless.</p> <p>When\u00a0you\u00a0create\u00a0an\u00a0<code>AgentKnowledgeBase</code> with\u00a0the\u00a0<code>storageConfig.type = 'OPENSEARCH_SERVERLESS'</code>,\u00a0the\u00a0<code>OpenSearchServerlessHelper</code> construct\u00a0is\u00a0used\u00a0to\u00a0create\u00a0an\u00a0OpenSearch\u00a0Serverless\u00a0collection\u00a0and\u00a0the\u00a0necessary\u00a0resources\u00a0(access\u00a0policies,\u00a0security\u00a0policies,\u00a0and\u00a0Lambda\u00a0functions)\u00a0for\u00a0managing\u00a0the\u00a0collection.</p> <p>You\u00a0can\u00a0also\u00a0use\u00a0the\u00a0<code>OpenSearchServerlessHelper</code> construct\u00a0directly\u00a0if\u00a0you\u00a0need\u00a0to\u00a0create\u00a0and\u00a0manage\u00a0OpenSearch\u00a0Serverless\u00a0collections\u00a0and\u00a0indices\u00a0outside\u00a0of\u00a0the\u00a0<code>AgentKnowledgeBase</code> context:</p> <pre><code>import { OpenSearchServerlessHelper, CollectionType } from './constructs/utilities/OpenSearchServerlessHelper';\n\nconst helper = new OpenSearchServerlessHelper(stack, 'TestHelper', {\n  collectionName: 'test-collection',\n  accessRoles: [accessRole],\n  region: 'us-east-1',\n  accountId: '123456789012',\n  collectionType: CollectionType.VECTORSEARCH, // Specify the collection type\n});\n</code></pre>"},{"location":"UserGuide/#guardrails","title":"Guardrails","text":"<p>The <code>BedrockGuardrailsBuilder</code> construct is a utility class that simplifies the creation of Amazon Bedrock Guardrails. Guardrails are a set of rules and policies that help ensure the safety and compliance of your AI applications. The  <code>BedrockGuardrailsBuilder</code> allows you to configure various aspects of a Guardrail, such as content filtering, sensitive information handling, topic management, and word policies. After\u00a0you've\u00a0built\u00a0the\u00a0Guardrail\u00a0using\u00a0the\u00a0<code>BedrockGuardrailsBuilder</code> you\u00a0can\u00a0associate\u00a0it\u00a0with\u00a0an\u00a0Amazon\u00a0Bedrock\u00a0Agent\u00a0Blueprint\u00a0using\u00a0the\u00a0<code>BedrockAgentBlueprintsConstruct</code></p> <pre><code>const guardrail = guardrailBuilder.build();\n\nnew BedrockAgentBlueprintsConstruct(stack, 'TestConstruct', {\n  agentDefinition: agentDefinition,\n  guardrail: guardrail,\n});\n</code></pre> <p>This\u00a0will\u00a0associate\u00a0the\u00a0Guardrail\u00a0with\u00a0the\u00a0Agent\u00a0Blueprint ensuring\u00a0that\u00a0the\u00a0configured\u00a0policies\u00a0are\u00a0applied\u00a0to\u00a0the\u00a0Agent.</p>"},{"location":"UserGuide/#customizing-guardrail-properties","title":"Customizing\u00a0Guardrail\u00a0Properties","text":"<p>You\u00a0can\u00a0customize\u00a0various\u00a0properties\u00a0of\u00a0the\u00a0Guardrail\u00a0by\u00a0passing\u00a0additional\u00a0options\u00a0to\u00a0the\u00a0<code>BedrockGuardrailsBuilder</code> constructor:</p> <pre><code>const guardrailBuilder = new BedrockGuardrailsBuilder(stack, 'TestGuardrail', {\n  name: 'TestGuardrail',\n  blockedInputMessaging: 'Custom input message',\n  blockedOutputsMessaging: 'Custom output message',\n  description: 'Test guardrail description',\n  kmsKeyArn: 'kmsKeyArn', // Existing KMS Key ARN\n});\nconst guardrail = guardrailBuilder.build();\n</code></pre>"},{"location":"UserGuide/#generating-a-kms-key","title":"Generating\u00a0a\u00a0KMS\u00a0Key","text":"<p>If\u00a0you\u00a0want\u00a0the\u00a0<code>BedrockGuardrailsBuilder</code> to\u00a0generate\u00a0a\u00a0new\u00a0KMS\u00a0key\u00a0for\u00a0you,\u00a0you\u00a0can\u00a0set\u00a0the\u00a0<code>generateKmsKey</code> to <code>true</code>. Or you can provide your own key with <code>kmsKeyArn</code></p> <pre><code>const guardrailBuilder = new BedrockGuardrailsBuilder(stack, 'TestGuardrail', {\n  name: 'TestGuardrail',\n  generateKmsKey: true,\n});\nconst guardrail = guardrailBuilder.build();\n</code></pre>"},{"location":"UserGuide/#configuring-content-policies","title":"Configuring\u00a0Content\u00a0Policies","text":"<p>The\u00a0<code>BedrockGuardrailsBuilder</code> allows\u00a0you\u00a0to\u00a0configure\u00a0content\u00a0policies\u00a0for\u00a0filtering,\u00a0sensitive\u00a0information\u00a0handling,\u00a0topic\u00a0management,\u00a0and\u00a0word\u00a0policies.\u00a0Here's\u00a0an\u00a0example\u00a0of\u00a0how\u00a0to\u00a0use\u00a0these\u00a0configurations:</p> <pre><code>const guardrailBuilder = new BedrockGuardrailsBuilder(stack, 'TestGuardrail', {\n  name: 'TestGuardrail',\n  description: 'Test guardrail with all configurations',\n  generateKmsKey: true,\n})\n  .withFiltersConfig(FilterType.VIOLENCE, FilterStrength.HIGH, FilterStrength.MEDIUM)\n  .withFiltersConfig(FilterType.SEXUAL, FilterStrength.LOW)\n  .withPIIConfig(PIIAction.BLOCK, PIIType.EMAIL)\n  .withPIIConfig(PIIAction.ANONYMIZE, PIIType.NAME)\n  .withTopicConfig('Politics', 'Discussions related to politics', ['election', 'government'])\n  .withManagedWordsConfig(ManagedWordsTypes.PROFANITY)\n  .withWordsConfig(['badword1', 'badword2']);\nconst guardrail = guardrailBuilder.build();\n</code></pre> <p>This\u00a0example\u00a0demonstrates\u00a0how\u00a0to\u00a0configure\u00a0filters\u00a0for\u00a0violence\u00a0and\u00a0sexual\u00a0content, handle\u00a0sensitive\u00a0information\u00a0like\u00a0emails\u00a0and\u00a0names,\u00a0manage\u00a0topics\u00a0related\u00a0to\u00a0politics,\u00a0and\u00a0block\u00a0or\u00a0allow\u00a0specific\u00a0words\u00a0or\u00a0profanity.</p>"},{"location":"UserGuide/#testing","title":"Testing","text":"<p>The\u00a0<code>BedrockAgentBlueprintsConstruct</code> includes\u00a0unit\u00a0tests\u00a0to\u00a0ensure\u00a0the\u00a0correct\u00a0behavior\u00a0of\u00a0the\u00a0construct.\u00a0You\u00a0can\u00a0run\u00a0the\u00a0tests\u00a0using\u00a0the\u00a0following\u00a0command:</p> <pre><code>npm test\n</code></pre>"},{"location":"UserGuide/#deployment","title":"Deployment","text":"<p>To\u00a0deploy\u00a0your\u00a0CDK\u00a0app\u00a0with\u00a0the\u00a0<code>BedrockAgentBlueprintsConstruct</code>,\u00a0follow\u00a0the\u00a0standard\u00a0CDK\u00a0deployment\u00a0process:</p> <pre><code>npm run build\ncdk synth\ncdk deploy\n</code></pre> <p>This\u00a0will\u00a0synthesize\u00a0the\u00a0CloudFormation\u00a0template\u00a0and\u00a0deploy\u00a0the\u00a0resources\u00a0to\u00a0your\u00a0AWS\u00a0account.</p>"},{"location":"about/about-agents/","title":"Agent for Amazon Bedrock","text":"<p>Agents for Amazon Bedrock offers you the ability to build and configure autonomous agents in your application. An agent helps your end-users complete actions based on organization data and user input. Agents orchestrate interactions between foundation models (FMs), data sources, software applications, and user conversations. In addition, agents automatically call APIs to take actions and invoke knowledge bases to supplement information for these actions. Developers can save weeks of development effort by integrating agents to accelerate the delivery of generative artificial intelligence (generative AI) applications.</p> What can you do with Agents for Amazon bedrock? <p>With agents, you can automate tasks for your customers and answer questions for them. For example, you can create an agent that helps customers process insurance claims or an agent that helps customers make travel reservations. You don't have to provision capacity, manage infrastructure, or write custom code. Amazon Bedrock manages prompt engineering, memory, monitoring, encryption, user permissions, and API invocation.</p> <p>Agents perform the following tasks:</p> <ul> <li>Extend foundation models to understand user requests and break down the tasks that the agent must perform into smaller steps.</li> <li>Collect additional information from a user through natural conversation.</li> <li>Take actions to fulfill a customer's request by making API calls to your company systems.</li> <li>Augment performance and accuracy by querying data sources.</li> </ul> <p>To learn more about Agents for Amazon Bedrock, visit our full documentation.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Note: If you used the recommended shell script method to install the prerequisites and the Agent Blueprints package, you can skip the NPM installation step mentioned below. Your environment already has the Agent Blueprints package installed.</p> <p>To deploy an agent from a template using the shell script helper, follow these steps:</p> Find and deploy agent templates using shell script<pre><code># List available templates\n./blueprints.sh ls \n\n# Deploy a template\n./blueprints.sh deploy &lt;name-of-the-example-stack&gt; \n\n# Example deployment\n./blueprints.sh deploy 01-agent-with-function-definitions\n</code></pre> Manual Installation  <p>If you prefer to install the Agent Blueprints package manually, follow these steps:</p> <ol> <li>Create\u00a0a\u00a0new\u00a0CDK\u00a0project\u00a0or\u00a0navigate\u00a0to\u00a0an\u00a0existing\u00a0one.    </li> <li>Install\u00a0the\u00a0<code>BedrockAgentBlueprintsConstruct</code> package:</li> </ol> <pre><code>npm install @aws/agents-for-amazon-bedrock-blueprints\n</code></pre> How to use Agent Blueprint? <p>You can either directly deploy the preconfigured blueprint using CDK or you can optionally extend the blueprint based on your requirements. </p> <p>Using Templates: These are pre-built agent templates that cover some of the most common use cases for Amazon Bedrock agents. These templates are ready to use, and can help create an agent in just a few minutes.</p> preconfigured-travel-agent.ts<pre><code>cdk synth TravelAgentDefaultStack\ncdk deploy TravelAgentDefaultStack\n</code></pre> <p>Using Constructs: These are reusable building blocks that allow you to create a custom agent templates with specific configurations and options.</p> customize-preconfigured-travel-agent.ts<pre><code>const app = new cdk.App();\nconst stack = new cdk.Stack(app, 'MyStack');\n\n// Create an agent with built-in template\nconst travelAssistant =  buildTravelAssistantAgent();\n\n//If the users want to customize their agent further\nconst hotelsInfo = new KnowledgeBase(...); \ntravelAssistant.addKnowledgeBase(hotelsInfo) // Allows user to add their own resources\n\n//Add the resources to the stack deployment.\n</code></pre>"},{"location":"getting-started/learn-cdk/","title":"Learn about AWS CDK with TypeScript","text":"<p>AWS CDK (Cloud Development Kit) with TypeScript enables developers to define cloud infrastructure using familiar programming concepts. It provides a high-level object-oriented framework for defining AWS resources as code. With AWS CDK, you can leverage TypeScript's strong typing and modern language features to create, compose, and reuse cloud components. This approach simplifies infrastructure management, improves code reusability, and enhances development productivity.</p> Some key terms used in AWS CDK <ul> <li>cdk bootstrap: Prepares your AWS environment for usage with the AWS CDK. This is required before deploying a CDK stack into an AWS environment.</li> <li>cdk synth: Synthesizes an AWS CloudFormation template from one or more of the stacks in your AWS CDK app.</li> <li>cdk deploy: Deploys the resources defined by one or more of the stacks in your AWS CDK app to AWS.</li> </ul> Learning Resources <ol> <li>AWS CDK Documentation: Comprehensive guidance on using AWS CDK with TypeScript.</li> <li>CDK Features: Learn about the key terms used in AWS CDK.</li> <li>CDK Core Concepts: Understand the fundamental concepts of CDK.</li> <li>CDK Workshop: A hands-on workshop to get started with coding in AWS CDK.</li> </ol> <p>For those interested in learning AWS CDK step by step, additional resources can be found here.</p>"},{"location":"getting-started/prerequisite/","title":"Prerequisites","text":"<p>Before you begin, you must have the following installed:</p> <ol> <li>AWS CLI</li> <li>Node.js and NPM</li> <li>AWS CDK</li> <li>TypeScript</li> </ol>"},{"location":"getting-started/prerequisite/#shell-script-installation-recommended","title":"Shell Script Installation (Recommended)","text":"<p>This method uses a readily available shell script to install the <code>agent blueprints</code> NPM package and its required dependencies. You do not need to install the <code>agent blueprint</code> separately if you use this method. Follow these steps:</p> <p>1. Clone the repository:    <pre><code>git clone https://github.com/aws-samples/amazon-bedrock-samples.git\n</code></pre></p> <p>2. Navigate to the appropriate folder:    <pre><code>cd amazon-bedrock-samples/agents-for-bedrock/agent-blueprint-templates/\n</code></pre> 3. Run the shell script to install all the dependencies:</p> <p><pre><code>./blueprints.sh init\n</code></pre> After completing these steps, you should have the <code>Agent Blueprints</code> package installed along with its dependencies, and your environment will be ready to use the Agent Blueprints.</p> <p>Note: You may still have to configure your AWS CLI. The shell script will only install the necessary dependencies. To learn about configuring AWS CLI, click here</p>"},{"location":"getting-started/prerequisite/#manual-installation","title":"Manual Installation","text":"<p>Alternatively, you can manually install the dependencies by following these steps:</p> <ol> <li> <p>AWS CLI: Make sure you have the AWS CLI installed and configured with your credentials.</p> </li> <li> <p>Node.js and npm: Install the latest stable version of Node.js and npm.    <pre><code># For Mac\nbrew install node\n\n# For Ubuntu\nsudo apt install nodejs\n</code></pre></p> </li> <li> <p>AWS CDK: Install the AWS CDK globally.    <pre><code>npm install -g aws-cdk@2.147.3\n</code></pre></p> </li> <li> <p>TypeScript: The Agent Blueprints are only available in TypeScript.</p> </li> <li> <p>CDK Bootstrap: Bootstrap your AWS environment.    <pre><code>cdk bootstrap aws://&lt;your-account-number&gt;/&lt;region-to-bootstrap&gt;\n</code></pre></p> </li> </ol> <p>After completing either method, you should have all the necessary dependencies installed and your environment prepared to use Agent Blueprints.</p>"},{"location":"prompt-library/prompt-library/","title":"Prompt Library","text":"<p>This page contains a collection of prompts that you can use as is or design your own prompts that can be used with the agent-blueprint. The prompts listed here are essential components of the library, enabling various functionalities.</p> Using the Prompts <p>Users can view and utilize the full prompts by visiting the GitHub repository or cloning it locally. The prompts are available in the <code>prompt-library</code> folder within the repository.</p> <p>To access the prompts:</p> <ol> <li>Visit the GitHub repository: Link to GitHub repository</li> <li>Navigate to the prompt that you are interested in.</li> <li>Copy the desired prompt or clone the repository to your local machine.</li> </ol> Prompt Summaries <p>Feel free to explore and utilize these prompts in your projects or modify them according to your requirements.</p> Example Code Snippet Using a Prompt <pre><code>import * as cdk from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport { AgentDefinitionBuilder, PromptType } from '../../agents-for-amazon-bedrock-blueprints/lib/constructs/AgentDefinitionBuilder';\nimport { BedrockAgentBlueprintsConstruct } from '../../agents-for-amazon-bedrock-blueprints/lib/constructs/BedrockAgentBlueprintsConstruct';\nimport * as bedrock from 'aws-cdk-lib/aws-bedrock';\n\nimport {\n    claude3SonnetPromptInjectionOrchestrationPrompt\n} from '../../amazon-bedrock-samples/agents-for-bedrock/agent-blueprint-templates/lib/prompt_library/prompt-injection-mitigation-prompts'\n\n\nexport class MyCdkAppStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const prompt: bedrock.CfnAgent.PromptConfigurationProperty = {\n      promptType: PromptType.ORCHESTRATION,\n      promptCreationMode: \"OVERRIDDEN\",\n      inferenceConfiguration: {\n        maximumLength: 2048,\n        stopSequences: [\"\\n\\nHuman:\"],\n        temperature: 0,\n        topK: 250,\n        topP: 1,\n      },\n      basePromptTemplate: claude3SonnetPromptInjectionOrchestrationPrompt,\n    };\n\n    const agentDef = new AgentDefinitionBuilder(this, 'NewAgentDef', {})\n        .withAgentName('NewFriendlyAgent')\n        .withInstruction('nice new fun agent to do great things in code')\n        .withUserInput()\n        .withOrchestrationPrompt(prompt)\n        .withFoundationModel('anthropic.claude-3-sonnet-20240229-v1:0')\n        .build();\n\n\n    new BedrockAgentBlueprintsConstruct(this, 'AmazonBedrockAgentBlueprintsStack', {\n      agentDefinition: agentDef,\n    });\n  }\n}\n</code></pre>  prompts.ts  <ol> <li> <p>customPreprocessingPrompt This prompt is used to categorize user inputs into different categories based on their nature and intent. It helps filter out malicious or harmful inputs, inputs trying to manipulate the agent's behavior, inputs that the agent cannot answer, inputs that can be answered by the agent, inputs that are answers to the agent's questions, and inputs with multiple questions.</p> </li> <li> <p>orchestrationPrompt This prompt is the main orchestration prompt that guides the agent in answering user questions. It provides instructions on how to call the available functions, think through the question, extract data, ask for missing information, provide the final answer, and handle specific scenarios like knowledge base usage and code interpretation.</p> </li> <li> <p>kbResponseGenerationPrompt This prompt is used by the agent to generate an answer based on the provided search results. The agent must use only the information from the search results to answer the user's question and provide citations for the sources used.</p> </li> <li> <p>customPostProcessingPrompt This prompt is used to provide additional context to the agent's response, making it more understandable for the user. It helps explain the actions taken by the agent without revealing implementation details or function names.</p> </li> </ol>  prompt-injection-mitigation-prompts.ts  <p>These prompts add additional instructions that can help mitigate prompt injection attacks. For more information, see: Prompt injection security</p> <ol> <li> <p>claude3SonnetPromptInjectionOrchestrationPrompt This prompt is for mitigating prompt injection attacks on the Claude 3 Sonnet model.</p> </li> <li> <p>claude3HaikuPromptInjectionOrchestrationPrompt This prompt is for mitigating prompt injection attacks on the Claude 3 Haiku model.</p> </li> <li> <p>titanTextPremierPromptInjectionOrchestrationPrompt This prompt is for mitigating prompt injection attacks on the Amazon Titan Text G1 - Premier model.</p> </li> </ol>"},{"location":"support/support/","title":"Support","text":"<p>For questions, issues, or feature requests, please open an issue in our GitHub repository.</p>"},{"location":"using-constructs/features/","title":"Customization Options","text":"<p>The\u00a0<code>BedrockAgentBlueprintsConstruct</code> provides\u00a0several\u00a0customization\u00a0options:</p>"},{"location":"using-constructs/features/#opt-out-of-creating-resources-for-knowledge-basekb","title":"Opt-out of creating resources for knowledge base(KB)","text":"<p>Users can choose to opt-out of creating KB resources as it may become expensive to deploy the AOSS clusters for KB. If any templates initializes KB, you can skip KB creation by adding a flag skipKBCreation in the CDK context.</p> <p>Example: <pre><code>cdk synth &lt;STACK_NAME&gt; --context skipKBCreation=true\n</code></pre></p>"},{"location":"using-constructs/features/#iam-role-management","title":"IAM Role Management","text":"<p>The <code>BedrockAgentBlueprintsConstruct</code> can automatically create and manage an IAM role for your Bedrock agent if you don't provide one. If you don't specify an <code>agentResourceRoleArn</code> in the <code>AgentDefinitionBuilder</code>, the construct will create a new IAM role with the necessary permissions for your agent. It will add required permissions for the ActionGroup invocation, FoundationModel access, KB access etc.</p> <p>However, if you prefer to use an existing IAM role, you can provide the ARN of that role using the <code>withAgentResourceRoleArn()</code> method in the <code>AgentDefinitionBuilder</code>.</p> <p>This also adds a resource policy to the Lambda functions associated with the provided action groups. The permission allows the 'bedrock.amazonaws.com' service principal to invoke the Lambda function, using the agent's ARN as the source ARN. This ensures that the Bedrock service can invoke the Lambda functions associated with the agent's action groups</p>"},{"location":"using-constructs/features/#asset-bucket-management","title":"Asset bucket management","text":"<p>The <code>BedrockAgentBlueprintsConstruct</code> automatically creates and manages Amazon S3 buckets for storing the contents of your knowledge bases and action groups. When you define a knowledge base using the <code>AgentKnowledgeBase</code>construct and add files from local store and/or when you use a file for defining schema for an action group using the <code>AgentActionGroup</code> construct, the <code>BedrockAgentBlueprintsConstruct</code> creates an S3 bucket and uploads the specified asset files to it under separate folders.  This feature simplifies the management of your agent's assets and ensures that they are securely stored and easily accessible by the corresponding AWS services. </p>"},{"location":"using-constructs/getting-started-with-constructs/","title":"Get Started with Constructs","text":"Prerequisites <p>To configure the environment check Prerequisite page.</p> Installation <p>For instructions on installation check Installation page.</p> Key Components for Constructs <p>The BedrockAgentBlueprintsConstruct is composed of the following key components:</p> <ul> <li> <p><code>Agent Definition</code>: An AgentDefinitionBuilder is used to define the agent's properties like name, instruction, foundationModel etc. This also allows users to build the agent with different prompts from the library.</p> </li> <li> <p><code>Action Groups</code>: An AgentActionGroup is a placeholder construct used to define the actions that the agent can perform, and helps in setup of associated Lambda function code and OpenAPI schema.</p> </li> <li> <p><code>Knowledge Bases</code>: An AgentKnowledgeBase is used to define the knowledge base for the agent, which can include various asset files for the data source. Currently this supports automated creation of an AOSS cluster, deploys the assets to an assets bucket, builds a data source, builds a KB and syncs the data source.</p> </li> <li> <p><code>Guardrails</code>: The BedrockGuardrailsBuilder construct is a utility class that simplifies the creation of Amazon Bedrock Guardrails. Guardrails are a set of rules and policies that help ensure the safety and compliance of your AI applications.</p> </li> </ul>"},{"location":"using-constructs/helper-constructs/","title":"Helper Constructs","text":""},{"location":"using-constructs/helper-constructs/#agent-definition","title":"Agent\u00a0Definition","text":"<p>The <code>AgentDefinitionBuilder</code>is a utility construct that simplifies the process of creating and configuring Amazon Bedrock agent definitions. It follows the builder pattern and uses composition to generate the <code>CfnAgentProps</code> required for creating a Bedrock agent.</p> Generating CfnAgentProps <p>The primary purpose of the <code>AgentDefinitionBuilder</code> is to generate the <code>CfnAgentProps</code> object, which is required for creating a Bedrock agent using the CfnAgent CDK construct. The builder provides an easy-to-use interface for specifying various properties of the agent definition, such as the agent name, instruction, foundation model, etc. Example: <pre><code>const agentDef = new AgentDefinitionBuilder(stack, 'NewAgentDef', {})\n  .withAgentName('MyAgent')\n  .withInstruction('My agent instructions to build a great agent')\n  .withFoundationModel('anthropic.claude-v2')\n  .withAgentResourceRoleArn('arn:aws:iam::123456789012:role/MyExistingRole')\n  .build();\n</code></pre></p> Prompt Configuration <p>The <code>AgentDefinitionBuilder</code> simplifies the creation and configuration of prompts for your Bedrock agent. It provides methods for adding different types of prompts from the prompt library, such as pre-processing, post-processing, and response generation prompts.</p> <p><pre><code>const prompt: bedrock.CfnAgent.PromptConfigurationProperty = {\n  promptType: PromptType.PRE_PROCESSING,\n  promptCreationMode: PromptConfig_Default,\n  basePromptTemplate: 'This is a test prompt',\n};\n\nbuilder.withPreprocessingPrompt(prompt);\n</code></pre> The builder also includes validations to ensure that prompt configurations are valid and consistent. For example, it checks if the required fields are provided and prevents redefining the same prompt type.</p> User Input Action <p>Creating a user input action group is not straightforward when using the AWS CLI or SDK. The <code>AgentDefinitionBuilder</code> simplifies this process by providing the <code>withUserInput()</code> method, which automatically creates and configures the necessary resources for a user input action group. <pre><code>const builder = new AgentDefinitionBuilder(stack, 'NewAgentDef', {});\nbuilder.withAgentName('MyAgent');\nbuilder.withUserInput();\n</code></pre></p> <p>This method adds the required action group, using parentActionGroupSignature as <code>AMAZON.UserInput</code></p>"},{"location":"using-constructs/helper-constructs/#action-groups","title":"Action\u00a0Groups","text":"<p>The <code>AgentActionGroup</code> construct is a lightweight utility at allows you to define and configure action groups for your Amazon Bedrock agent. Action groups represent the set of actions that your agent can perform, and they are associated with a Lambda function and an API schema.</p> Properties <ul> <li>actionGroupName(required): The name of the action group.</li> <li>description(optional): A description of the action group.</li> <li>actionGroupExecutor(required): An object that defines the Lambda function responsible for executing the action group. This allows you to customize the Lambda function that will execute the action group. You can specify the following properties:</li> <li>lambdaDefinition: An object that defines the Lambda function code, handler, and runtime.<ul> <li>lambdaCode: The code for the Lambda function (e.g., an inline code buffer or a reference to a file).</li> <li>lambdaHandler: The handler function for the Lambda function.</li> <li>lambdaRuntime: The runtime environment for the Lambda function (e.g., nodejs18.x).</li> </ul> </li> <li>lambdaExecutor: Custom lambda function object that can directly be associated with an action.</li> <li>customControl: Constant string that will be returned to the user as a fixed response.</li> <li>NOTE: if all multiple params are defined lambdaExecutor will take precedence followed by lambdaDefinition then customControl.</li> <li>schemaDefinition(required): An object that allows you to define the API/Function schema for the action group. You can specify the schema in one of the following ways:</li> <li>inlineAPISchema: An inline API schema definition as a string.</li> <li>apiSchemaFile: A file buffer containing the API schema definition. The BedrockAgentBlueprintsConstruct will make a deployment to S3 and construct the URI params to link to the action.</li> <li>functionSchema: Defines functions that each define parameters that the agent needs to invoke from the user.</li> <li>actionGroupState(optional): The state of the action group (ENABLED or DISABLED).</li> <li>parentActionGroupSignature(optional): Used to define reserved actions.</li> </ul> Example: <pre><code>const inlineCode = Buffer.from(\n    `\n        exports.handler = async (event) =&gt; {\n            return { message: process_stuff() };\n        };\n    `);\n\nconst fileBufferSchema: Buffer = readFileSync(resolve(__dirname, 'assets', 'openAPISchema.json'));\nconst action1 = new AgentActionGroup(this, 'NewAction', {\n    actionGroupName: 'DummyAction',\n    description: 'Dummy action for dummy agent',\n    actionGroupExecutor: {\n        lambdaDefinition: {\n            lambdaCode: inlineCode,\n            lambdaHandler: 'index.handler',\n            lambdaRuntime: Runtime.NODEJS_18_X\n        }\n    },\n    schemaDefinition: {\n        inlineAPISchema: fileBufferSchema.toString('utf8')\n    },\n});\n\nconst lambdaFunction = new Function(this, 'MyLambdaFunction', {\n      runtime: Runtime.NODEJS_14_X,\n      code: Code.fromInline(inlineCode.toStrint('utf8')),\n      handler: 'index.handler',\n    });\n\nconst action2 = new AgentActionGroup(this, 'NewAction', {\n    actionGroupName: 'DummyAction2',\n    description: 'Dummy action for dummy agent',\n    actionGroupExecutor: {\n        lambdaExecutor: lambdaFunction,\n    },\n    schemaDefinition: {\n        apiSchemaFile: fileBufferSchema,\n    },\n});\n\nconst action3 = new AgentActionGroup(this, 'NewAction', {\n    actionGroupName: 'DummyAction3',\n    description: 'Call this action when nothing is available',\n    actionGroupExecutor: {\n        customControl: 'Nothing is available',\n    }\n});\n\nnew BedrockAgentBlueprintsConstruct(stack, 'MyAgentBlueprint', {\n  agentDefinition: agentDef,\n  actionGroups: [action1, action2, action3],\n});\n</code></pre>"},{"location":"using-constructs/helper-constructs/#knowledge-bases","title":"Knowledge\u00a0Bases","text":"<p>The\u00a0<code>AgentKnowledgeBase</code> construct\u00a0is\u00a0a\u00a0utility\u00a0class\u00a0that\u00a0simplifies\u00a0the\u00a0creation\u00a0and\u00a0management\u00a0of\u00a0Amazon\u00a0Bedrock\u00a0Knowledge\u00a0Bases.\u00a0A\u00a0knowledge\u00a0base\u00a0is\u00a0a\u00a0repository\u00a0of\u00a0information\u00a0that\u00a0can\u00a0be\u00a0used\u00a0to\u00a0train\u00a0and\u00a0enhance\u00a0the\u00a0capabilities\u00a0of\u00a0an\u00a0agent. The\u00a0<code>AgentKnowledgeBase</code> construct\u00a0allows\u00a0you\u00a0to\u00a0configure\u00a0various\u00a0aspects\u00a0of\u00a0a\u00a0knowledge\u00a0base,\u00a0such\u00a0as\u00a0the\u00a0storage\u00a0configuration,\u00a0knowledge\u00a0base\u00a0type,\u00a0and\u00a0data\u00a0sources. To\u00a0create\u00a0a\u00a0basic\u00a0knowledge\u00a0base\u00a0with\u00a0default\u00a0settings,\u00a0you\u00a0can\u00a0use\u00a0the\u00a0following\u00a0code:</p> <pre><code>const kbProps = {\n  kbName: 'TestKB',\n  agentInstruction: 'Test instruction for the Knowledge Base',\n  assertFiles: [/* ... */], // Array of file buffers to include in the Knowledge Base\n};\n\nconst kb = new AgentKnowledgeBase(stack, 'TestKB', kbProps);\n</code></pre> <p>This\u00a0will\u00a0create\u00a0a\u00a0knowledge\u00a0base\u00a0with\u00a0the\u00a0name\u00a0'TestKB', set\u00a0default\u00a0values\u00a0for\u00a0the\u00a0embedding model TITAN_EMBED_TEXT_V1 with AmazonOpenSearchServerless collection and set up a default vector index.</p> Customizing\u00a0knowledge\u00a0base\u00a0Properties <p>You\u00a0can\u00a0customize\u00a0various\u00a0properties\u00a0of\u00a0the\u00a0knowledge\u00a0base\u00a0by\u00a0passing\u00a0additional\u00a0options\u00a0to\u00a0the\u00a0<code>AgentKnowledgeBase</code> constructor:</p> <pre><code>const kbProps = {\n  kbName: 'TestKB',\n  agentInstruction: 'Test instruction for the Knowledge Base',\n  assertFiles: [/* ... */],\n  storageConfiguration: {\n    type: 'OPENSEARCH_SERVERLESS',\n    configuration: {\n      indexConfiguration: {...custom index config}\n    },\n  },\n  embeddingModel: BedrockKnowledgeBaseModels.TITAN_EMBED_TEXT_V1\n};\n\nconst kb = new AgentKnowledgeBase(stack, 'TestKB', kbProps);\n</code></pre>"},{"location":"using-constructs/helper-constructs/#iam-role-management","title":"IAM Role Management","text":"<p><code>AgentKnowledgeBase</code> will create a service role to allow agent to access the KB and allow the KB to access the asset files in S3, permissions for accessing the AOSS collection and indices and permissions for accessing the embedding models.</p> Creating\u00a0and\u00a0Synchronizing\u00a0Data\u00a0Sources <p>The\u00a0<code>AgentKnowledgeBase</code> construct\u00a0provides\u00a0a\u00a0method\u00a0<code>createAndSyncDataSource</code> to\u00a0create\u00a0and\u00a0synchronize\u00a0data\u00a0sources\u00a0with\u00a0the\u00a0Knowledge\u00a0Base. Data\u00a0sources\u00a0can\u00a0be\u00a0Amazon\u00a0S3\u00a0buckets\u00a0or\u00a0folders\u00a0containing\u00a0the\u00a0information\u00a0you\u00a0want\u00a0to\u00a0include\u00a0in\u00a0the\u00a0Knowledge\u00a0Base: When we attach a knowledgebase to the <code>BedrockAgentBlueprintsConstruct</code> it calls the <code>createAndSyncDataSource</code> to populate the KB with the data in asset management bucket.</p> OpenSearchServerlessHelper <p>The\u00a0<code>OpenSearchServerlessHelper</code> construct\u00a0is\u00a0a\u00a0utility\u00a0class\u00a0that\u00a0simplifies\u00a0the\u00a0creation\u00a0and\u00a0management\u00a0of\u00a0Amazon\u00a0OpenSearch\u00a0Serverless\u00a0collections\u00a0and\u00a0indices.\u00a0This\u00a0construct\u00a0is\u00a0used\u00a0internally\u00a0by\u00a0the\u00a0<code>AgentKnowledgeBase</code> construct\u00a0when\u00a0configuring\u00a0the\u00a0storage\u00a0configuration\u00a0with\u00a0OpenSearch\u00a0Serverless.</p> <p>When\u00a0you\u00a0create\u00a0an\u00a0<code>AgentKnowledgeBase</code> with\u00a0the\u00a0<code>storageConfig.type = 'OPENSEARCH_SERVERLESS'</code>,\u00a0the\u00a0<code>OpenSearchServerlessHelper</code> construct\u00a0is\u00a0used\u00a0to\u00a0create\u00a0an\u00a0OpenSearch\u00a0Serverless\u00a0collection\u00a0and\u00a0the\u00a0necessary\u00a0resources\u00a0(access\u00a0policies,\u00a0security\u00a0policies,\u00a0and\u00a0Lambda\u00a0functions)\u00a0for\u00a0managing\u00a0the\u00a0collection.</p> <p>You\u00a0can\u00a0also\u00a0use\u00a0the\u00a0<code>OpenSearchServerlessHelper</code> construct\u00a0directly\u00a0if\u00a0you\u00a0need\u00a0to\u00a0create\u00a0and\u00a0manage\u00a0OpenSearch\u00a0Serverless\u00a0collections\u00a0and\u00a0indices\u00a0outside\u00a0of\u00a0the\u00a0<code>AgentKnowledgeBase</code> context:</p> <pre><code>import { OpenSearchServerlessHelper, CollectionType } from './constructs/utilities/OpenSearchServerlessHelper';\n\nconst helper = new OpenSearchServerlessHelper(stack, 'TestHelper', {\n  collectionName: 'test-collection',\n  accessRoles: [accessRole],\n  region: 'us-east-1',\n  accountId: '123456789012',\n  collectionType: CollectionType.VECTORSEARCH, // Specify the collection type\n});\n</code></pre>"},{"location":"using-constructs/helper-constructs/#guardrails","title":"Guardrails","text":"<p>The <code>BedrockGuardrailsBuilder</code> construct is a utility class that simplifies the creation of Amazon Bedrock Guardrails. Guardrails are a set of rules and policies that help ensure the safety and compliance of your AI applications. The  <code>BedrockGuardrailsBuilder</code> allows you to configure various aspects of a Guardrail, such as content filtering, sensitive information handling, topic management, and word policies. Once\u00a0you've\u00a0built\u00a0the\u00a0Guardrail\u00a0using\u00a0the\u00a0<code>BedrockGuardrailsBuilder</code> you\u00a0can\u00a0associate\u00a0it\u00a0with\u00a0an\u00a0Amazon\u00a0Bedrock\u00a0Agent\u00a0Blueprint\u00a0using\u00a0the\u00a0<code>BedrockAgentBlueprintsConstruct</code></p> <pre><code>const guardrail = guardrailBuilder.build();\n\nnew BedrockAgentBlueprintsConstruct(stack, 'TestConstruct', {\n  agentDefinition: agentDefinition,\n  guardrail: guardrail,\n});\n</code></pre> <p>This\u00a0will\u00a0associate\u00a0the\u00a0Guardrail\u00a0with\u00a0the\u00a0Agent\u00a0Blueprint ensuring\u00a0that\u00a0the\u00a0configured\u00a0policies\u00a0are\u00a0applied\u00a0to\u00a0the\u00a0Agent.</p> Customizing\u00a0Guardrail\u00a0Properties <p>You\u00a0can\u00a0customize\u00a0various\u00a0properties\u00a0of\u00a0the\u00a0Guardrail\u00a0by\u00a0passing\u00a0additional\u00a0options\u00a0to\u00a0the\u00a0<code>BedrockGuardrailsBuilder</code> constructor:</p> <pre><code>const guardrailBuilder = new BedrockGuardrailsBuilder(stack, 'TestGuardrail', {\n  name: 'TestGuardrail',\n  blockedInputMessaging: 'Custom input message',\n  blockedOutputsMessaging: 'Custom output message',\n  description: 'Test guardrail description',\n  kmsKeyArn: 'kmsKeyArn', // Existing KMS Key ARN\n});\nconst guardrail = guardrailBuilder.build();\n</code></pre> Generating\u00a0a\u00a0KMS\u00a0Key <p>If\u00a0you\u00a0want\u00a0the\u00a0<code>BedrockGuardrailsBuilder</code> to\u00a0generate\u00a0a\u00a0new\u00a0KMS\u00a0key\u00a0for\u00a0you,\u00a0you\u00a0can\u00a0set\u00a0the\u00a0<code>generateKmsKey</code> to <code>true</code>. Or you can provide your own with <code>kmsKeyArn</code></p> <pre><code>const guardrailBuilder = new BedrockGuardrailsBuilder(stack, 'TestGuardrail', {\n  name: 'TestGuardrail',\n  generateKmsKey: true,\n});\nconst guardrail = guardrailBuilder.build();\n</code></pre> Configuring\u00a0Content\u00a0Policies <p>The\u00a0<code>BedrockGuardrailsBuilder</code> allows\u00a0you\u00a0to\u00a0configure\u00a0content\u00a0policies\u00a0for\u00a0filtering,\u00a0sensitive\u00a0information\u00a0handling,\u00a0topic\u00a0management,\u00a0and\u00a0word\u00a0policies.\u00a0Here's\u00a0an\u00a0example\u00a0of\u00a0how\u00a0to\u00a0use\u00a0these\u00a0configurations:</p> <pre><code>const guardrailBuilder = new BedrockGuardrailsBuilder(stack, 'TestGuardrail', {\n  name: 'TestGuardrail',\n  description: 'Test guardrail with all configurations',\n  generateKmsKey: true,\n})\n  .withFiltersConfig(FilterType.VIOLENCE, FilterStrength.HIGH, FilterStrength.MEDIUM)\n  .withFiltersConfig(FilterType.SEXUAL, FilterStrength.LOW)\n  .withPIIConfig(PIIAction.BLOCK, PIIType.EMAIL)\n  .withPIIConfig(PIIAction.ANONYMIZE, PIIType.NAME)\n  .withTopicConfig('Politics', 'Discussions related to politics', ['election', 'government'])\n  .withManagedWordsConfig(ManagedWordsTypes.PROFANITY)\n  .withWordsConfig(['badword1', 'badword2']);\nconst guardrail = guardrailBuilder.build();\n</code></pre> <p>This\u00a0example\u00a0demonstrates\u00a0how\u00a0to\u00a0configure\u00a0filters\u00a0for\u00a0violence\u00a0and\u00a0sexual\u00a0content, handle\u00a0sensitive\u00a0information\u00a0like\u00a0emails\u00a0and\u00a0names,\u00a0manage\u00a0topics\u00a0related\u00a0to\u00a0politics,\u00a0and\u00a0block\u00a0or\u00a0allow\u00a0specific\u00a0words\u00a0or\u00a0profanity.</p>"},{"location":"using-constructs/test-deploy/","title":"Test and Deploy Constructs","text":""},{"location":"using-constructs/test-deploy/#testing","title":"Testing","text":"<p>The <code>BedrockAgentBlueprintsConstruct</code> includes unit tests to ensure the correct behavior of the construct. You can run the tests using the following command:</p> <pre><code>npm test\n</code></pre>"},{"location":"using-constructs/test-deploy/#deployment","title":"Deployment","text":"<p>To deploy your CDK app with the <code>BedrockAgentBlueprintsConstruct</code>, follow the standard CDK deployment process: <pre><code>npm run build\ncdk synth\ncdk deploy\n</code></pre></p> <p>This\u00a0will\u00a0synthesize\u00a0the\u00a0CloudFormation\u00a0template\u00a0and\u00a0deploy\u00a0the\u00a0resources\u00a0to\u00a0your\u00a0AWS\u00a0account.</p>"},{"location":"using-constructs/usage/","title":"Example Template Using Constructs","text":"<p>Here's\u00a0an\u00a0example\u00a0of\u00a0how\u00a0to\u00a0use\u00a0the\u00a0<code>BedrockAgentBlueprintsConstruct</code> in\u00a0your\u00a0CDK\u00a0app. In this example we first define the agent properties using the <code>AgentDefinitionBuilder</code>. Then we create an action group with a Lambda function and API schema definition. Finally, we instantiate the <code>BedrockAgentBlueprintsConstruct</code> and pass in the agent definition and action group. You can further customize the agent by adding knowledge bases, guardrails, and other configurations:</p> <pre><code>import * as cdk from 'aws-cdk-lib';\nimport { readFileSync } from 'fs';\nimport { resolve } from \"path\";\nimport { Construct } from 'constructs';\nimport { BedrockAgentBlueprintsConstruct } from '../../bin/BedrockAgentBlueprintsConstruct';\nimport { AgentDefinitionBuilder } from '../../bin/constructs/AgentDefinitionBuilder';\nimport { Runtime } from 'aws-cdk-lib/aws-lambda';\nimport { AgentActionGroup } from '../../bin/constructs/AgentActionGroup';\nimport { AgentKnowledgeBase } from '../../bin/constructs/AgentKnowledgeBase';\nimport { BedrockGuardrailsBuilder, FilterType, ManagedWordsTypes, PIIAction, PIIType } from '../../bin/constructs/BedrockGuardrailsBuilder';\n\nexport class DemoTemplateStack extends cdk.Stack {\n    constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n        super(scope, id, props);\n\n        const agentDef = new AgentDefinitionBuilder(this, 'NewAgentDef', {})\n            .withAgentName('NewFriendlyAgent')\n            .withInstruction('nice new fun agent to do great things in code')\n            .withUserInput()\n            .build();\n\n        const inlineCode = Buffer.from(\n            `\n                exports.handler = async (event) =&gt; {\n                    console.log('Hello from Lambda!');\n                    return { message: 'Success!' };\n                };\n                `);\n\n        const fileBufferSchema: Buffer = readFileSync(resolve(__dirname, 'assets', 'openAPISchema.json'));\n        const action = new AgentActionGroup(this, 'NewAction', {\n            actionGroupName: 'DummyAction',\n            description: 'Dummy action for dummy agent',\n            actionGroupExecutor: {\n                lambdaDefinition: {\n                    lambdaCode: inlineCode,\n                    lambdaHandler: 'index.handler',\n                    lambdaRuntime: Runtime.NODEJS_18_X\n                }\n            },\n            schemaDefinition: {\n                inlineAPISchema: fileBufferSchema.toString('utf8')\n            },\n        });\n\n        const fileBuffer: Buffer = readFileSync(resolve(__dirname, 'assets', 'dummy.csv'));\n\n        const knowledgeBase = new AgentKnowledgeBase(this, 'NewKB', {\n            kbName: 'DummyKB',\n            agentInstruction: 'Dummy KB for dummy agent',\n            assetFiles: [fileBuffer]\n        });\n\n        const guardrail = new BedrockGuardrailsBuilder(this, \"AgentGuardrail\", {\n            name: \"RubyOnRails\",\n            generateKmsKey: true,\n        })\n            .withFiltersConfig(FilterType.INSULTS)\n            .withManagedWordsConfig(ManagedWordsTypes.PROFANITY)\n            .withWordsConfig(['government', 'dictator'])\n            .withPIIConfig(PIIAction.ANONYMIZE, PIIType.US_SOCIAL_SECURITY_NUMBER)\n            .withTopicConfig(\"Arts\", \"Anything related to arts and crafts\", ['painting', 'ceramics'])\n            .build();\n\n        new BedrockAgentBlueprintsConstruct(this, 'AmazonBedrockAgentBlueprintsStack', {\n            agentDefinition: agentDef,\n            actionGroups: [action],\n            knowledgeBases: [knowledgeBase],\n            guardrail: guardrail,\n        });\n    }\n}\n</code></pre>"},{"location":"using-templates/ag-advance-prompts-parser/","title":"Agent blueprints for advance prompts and lambda parser","text":"Agent with Custom Lambda Parser <p>This Agent Blueprint demonstrates how to create an HR Assistant Agent using Amazon Bedrock, AWS CDK, and the <code>BedrockAgentBlueprintsConstruct</code>. It showcases the power of using a custom Lambda function for parsing agent responses, enabling advanced processing and customization of the agent's output.</p> Quick Start: Deploying the Agent Blueprint <p>To deploy this Agent Blueprint:</p> <ol> <li>Ensure you have the AWS CDK installed and configured.</li> <li>Clone the repository containing these stacks and the BedrockAgentBlueprintsConstruct.</li> <li>Run the below code: <pre><code>cdk deploy AgentWithCustomLambdaParserStack\n</code></pre></li> </ol> <p>This single command will automatically deploy both the HRAssistDataStack and the AgentWithCustomLambdaParserStack in the correct order, thanks to the dependency condition set up in your CDK code.</p> <p>After deployment, you can interact with the agent through the Amazon Bedrock console or API to manage employee vacation time.</p> What is a Custom Lambda Parser? <p>Amazon Bedrock Agents allow you to customize the parsing of agent responses using a Lambda function. This feature enables advanced processing and transformation of the agent's output before it is returned to the user.</p> <p>In this blueprint, we create a custom Lambda function (<code>CustomParserFunction</code>) and associate it with the agent definition using the <code>withPromptParserOverride</code> method. This Lambda function will be invoked by the Bedrock service whenever the agent generates a response, allowing you to modify or enhance the output as needed.</p> <p>Some potential use cases for a custom Lambda parser include:</p> <ol> <li>Formatting and Styling: Apply custom formatting, styling, or markup to the agent's response.</li> <li>Data Enrichment: Enrich the response with additional data or metadata from external sources.</li> <li>Content Filtering: Filter or redact sensitive information from the agent's output.</li> <li>Language Translation: Translate the agent's response to a different language.</li> <li>Response Validation: Validate the agent's response against predefined rules or constraints.</li> </ol> <p>By leveraging a custom Lambda parser, you can tailor the agent's output to meet your specific requirements, ensuring a seamless and optimized user experience.</p> Overview <p>The blueprint consists of two main stacks and a custom construct, with an automated deployment process:</p> <ol> <li>HRAssistDataStack: Sets up the database infrastructure.</li> <li>AgentWithCustomLambdaParserStack: Creates the Bedrock Agent with a custom Lambda parser.</li> <li>BedrockAgentBlueprintsConstruct: A reusable construct for creating Bedrock Agents.</li> </ol> Key Components 1. Database Setup (HRAssistDataStack) <ul> <li>Creates an Aurora Serverless PostgreSQL database to store employee data.</li> <li>Sets up a Lambda function to populate the database with sample data.</li> <li>Outputs the database cluster ARN and secret ARN for use in the agent stack.</li> </ul> 2. Agent Creation (AgentWithCustomLambdaParserStack) <ul> <li>Defines the agent using <code>AgentDefinitionBuilder</code>:</li> <li>Sets the agent name, instructions, and foundation model.</li> <li>Configures pre-processing and post-processing prompts with custom templates.</li> <li>Associates the custom Lambda parser function for response parsing.</li> <li>Creates an <code>AgentActionGroup</code> with two function definitions:</li> <li><code>get_available_vacation_days</code>: Retrieves available vacation days for an employee.</li> <li><code>reserve_vacation_time</code>: Books vacation time for an employee.</li> <li>Sets up a Lambda function to handle these actions, connecting to the Aurora database.</li> <li>Creates a custom AWS CloudFormation resource to execute the custom parser Lambda function.</li> </ul> 3. BedrockAgentBlueprintsConstruct <p>This custom construct simplifies the process of creating agents for Amazon Bedrock. It handles:</p> <ul> <li>Knowledge base association and management</li> <li>Action group configuration</li> <li>S3 asset management for schemas and other files</li> <li>IAM role and policy setup for the agent</li> <li>Agent creation and configuration</li> </ul> How It Works <ol> <li>The HRAssistDataStack is automatically deployed as a dependency of the AgentWithCustomLambdaParserStack, creating the database and populating it with sample data.</li> <li>The AgentWithCustomLambdaParserStack is then deployed, using the BedrockAgentBlueprintsConstruct to:</li> <li>Create the Bedrock Agent with the defined functions and custom Lambda parser</li> <li>Set up necessary IAM roles and policies</li> <li>Configure action groups and knowledge bases (if any)</li> <li>Handle S3 asset management for schemas</li> <li>When invoked, the agent generates a response based on the user's input and the defined instructions.</li> <li>The Bedrock service invokes the custom Lambda parser function, passing the agent's response as input.</li> <li>The custom Lambda parser function processes the response according to your custom logic and returns the modified output.</li> <li>The modified response is then returned to the user.</li> </ol> Key Features <ul> <li>Implements a custom Lambda function for advanced parsing and transformation of agent responses</li> <li>Uses AWS CDK for infrastructure as code with automated stack dependencies</li> <li>Leverages Amazon Aurora Serverless for scalable database storage</li> <li>Utilizes AWS Lambda for serverless execution of database operations and custom parsing</li> <li>Employs a reusable construct (BedrockAgentBlueprintsConstruct) for simplified agent creation</li> <li>Supports pre-processing and post-processing prompts with custom templates</li> </ul> <p>For more detailed information on Agents for Amazon Bedrock custom Lambda parsers, please refer to the provided documentation and the official AWS Bedrock documentation.</p>"},{"location":"using-templates/ag-classification/","title":"Agent blueprint for classification","text":"Agent Blueprint for Simple Email Classification <p>This Agent Blueprint demonstrates how to create a simple email classification Agent using Amazon Bedrock, AWS CDK, and the <code>BedrockAgentBlueprintsConstruct</code>. The agent is designed to classify customer emails into four main categories based on the provided instructions, without any additional processing or actions.</p> Quick Start: Deploying the Agent Blueprint <p>To deploy this Agent Blueprint:</p> <ol> <li>Ensure you have the AWS CDK installed and configured.</li> <li>Clone the repository containing these stacks and the BedrockAgentBlueprintsConstruct.</li> <li>Run the below code: <pre><code>cdk deploy AgentWithSimpleClassificationStack\n</code></pre></li> </ol> <p>This command will deploy the AgentWithSimpleClassificationStack, creating the Bedrock Agent and associated resources.</p> <p>After deployment, you can interact with the agent through the Amazon Bedrock console or API to classify customer emails.</p> Email Classification Instructions <p>The Simple Email Classification Agent is instructed to categorize customer emails into the following four categories:</p> <ul> <li>CUSTOMER_SUPPORT: When customers require the support of a service specialist to solve an existing issue or pain point.</li> <li>COMPLAINT: When customers want to submit a complaint about a certain service or employee.</li> <li>FEEDBACK: When customers are providing feedback about a service they received.</li> <li>OTHERS: Any other topic that does not fall into the above categories.</li> </ul> <p>The agent is instructed to respond with the email classification only, without adding any additional text to the response.</p> Overview <p>The blueprint consists of a single stack and a custom construct:</p> <ol> <li>AgentWithSimpleClassificationStack: Creates the Bedrock Agent for simple email classification based on the provided instructions.</li> <li>BedrockAgentBlueprintsConstruct: A reusable construct for creating Bedrock Agents.</li> </ol> Key Components 1. Agent Creation (AgentWithSimpleClassificationStack) <ul> <li>Defines the agent using <code>AgentDefinitionBuilder</code>:</li> <li>Sets the agent name, instructions, and foundation model.</li> <li>Provides detailed instructions for the agent on how to classify customer emails into the four categories.</li> <li>Specifies that the agent should respond with the email classification only, without adding any additional text.</li> </ul> 2. BedrockAgentBlueprintsConstruct <p>This custom construct simplifies the process of creating agents for Amazon Bedrock. It handles:</p> <ul> <li>Knowledge base association and management</li> <li>Action group configuration</li> <li>S3 asset management for schemas and other files</li> <li>IAM role and policy setup for the agent</li> <li>Agent creation and configuration</li> </ul> How It Works <ol> <li>The AgentWithSimpleClassificationStack is deployed, creating the Bedrock Agent for simple email classification.</li> <li>When invoked, the agent receives a customer email as input.</li> <li>Based on the instructions provided, the agent analyzes the email content and classifies it into one of the four categories: Customer Support, Complaint, Feedback, or Others.</li> <li>The agent responds with the email classification only, without adding any additional text.</li> </ol> Key Features <ul> <li>Implements simple email classification based on provided instructions</li> <li>Categorizes emails into four predefined categories</li> <li>Specifies that the agent should respond with the classification only</li> <li>Uses AWS CDK for infrastructure as code</li> <li>Employs a reusable construct (BedrockAgentBlueprintsConstruct) for simplified agent creation</li> </ul> <p>For more detailed information on Agents for Amazon Bedrock and the BedrockAgentBlueprintsConstruct, please refer to the provided documentation and the official AWS Bedrock documentation.</p>"},{"location":"using-templates/ag-function-definition/","title":"Agent blueprint for function definition","text":"Agent Blueprint with Function Definitions <p>This Agent Blueprint demonstrates how to create an HR Assistant Agent using Amazon Bedrock, AWS CDK, and the <code>BedrockAgentBlueprintsConstruct</code>. It showcases the power of function definitions in creating intelligent, interactive agents for HR tasks.</p> Quick Start: Deploying the Agent Blueprint <p>To deploy this Agent Blueprint:</p> <ol> <li>Ensure you have the AWS CDK installed and configured.</li> <li>Clone the repository containing these stacks and the BedrockAgentBlueprintsConstruct.</li> <li>Run the below code: <pre><code>cdk deploy AgentWithFunctionDefinitionStack\n</code></pre></li> </ol> <p>This single command will automatically deploy both the HRAssistDataStack and the AgentWithFunctionDefinitionStack in the correct order, thanks to the dependency condition set up in your CDK code.</p> <p>After deployment, you can interact with the agent through the Amazon Bedrock console or API to manage employee vacation time.</p> What is Function Definitions? <p>Function definitions is a key feature of Amazon Bedrock Agents, allowing you to specify the parameters that an agent needs to collect from users. This capability enables agents to:</p> <ol> <li>Determine necessary information for completing tasks</li> <li>Guide conversations to gather required data</li> <li>Ensure all prerequisites are met before executing actions</li> </ol> <p>For example, in our HR Assistant Agent, we define functions like <code>reserve_vacation_time</code> with parameters such as:</p> <ul> <li><code>employee_id</code> (integer, required)</li> <li><code>start_date</code> (string, required)</li> <li><code>end_date</code> (string, required)</li> </ul> <p>This ensures the agent collects all necessary information before processing a vacation request. If a user doesn't provide all required details upfront, the agent will ask follow-up questions to gather the missing information.</p> <p>For more details on this feature, refer to the Amazon Bedrock documentation on defining function details for action groups.</p> Overview <p>The blueprint consists of two main stacks and a custom construct, with an automated deployment process:</p> <ol> <li>HRAssistDataStack: Sets up the database infrastructure.</li> <li>AgentWithFunctionDefinitionStack: Creates the Bedrock Agent with function definitions.</li> <li>BedrockAgentBlueprintsConstruct: A reusable construct for creating Bedrock Agents.</li> </ol> Key Components 1. Database Setup (HRAssistDataStack) <ul> <li>Creates an Aurora Serverless PostgreSQL database to store employee data.</li> <li>Sets up a Lambda function to populate the database with sample data.</li> <li>Outputs the database cluster ARN and secret ARN for use in the agent stack.</li> </ul> 2. Agent Creation (AgentWithFunctionDefinitionStack) <ul> <li>Defines the agent using <code>AgentDefinitionBuilder</code>:</li> <li>Sets the agent name, instructions, and foundation model.</li> <li>Creates an <code>AgentActionGroup</code> with two function definitions:</li> <li><code>get_available_vacation_days</code>: Retrieves available vacation days for an employee.</li> <li><code>reserve_vacation_time</code>: Books vacation time for an employee.</li> <li>Sets up a Lambda function to handle these actions, connecting to the Aurora database.</li> </ul> 3. BedrockAgentBlueprintsConstruct <p>This custom construct simplifies the process of creating agents for Amazon Bedrock. It handles:</p> <ul> <li>Knowledge base association and management</li> <li>Action group configuration</li> <li>S3 asset management for schemas and other files</li> <li>IAM role and policy setup for the agent</li> <li>Agent creation and configuration</li> </ul> How It Works <ol> <li>The HRAssistDataStack is automatically deployed as a dependency of the AgentWithFunctionDefinitionStack, creating the database and populating it with sample data.</li> <li>The AgentWithFunctionDefinitionStack is then deployed, using the BedrockAgentBlueprintsConstruct to:</li> <li>Create the Bedrock Agent with the defined functions</li> <li>Set up necessary IAM roles and policies</li> <li>Configure action groups and knowledge bases (if any)</li> <li>Handle S3 asset management for schemas</li> <li>When invoked, the agent uses the function definitions to guide its conversation with the user, ensuring it collects all required information before interacting with the database through the Lambda function to perform HR-related tasks.</li> </ol> Key Features <ul> <li>Implements function definitions for precise control over agent actions and user interactions</li> <li>Uses AWS CDK for infrastructure as code with automated stack dependencies</li> <li>Leverages Amazon Aurora Serverless for scalable database storage</li> <li>Utilizes AWS Lambda for serverless execution of database operations</li> <li>Employs a reusable construct (BedrockAgentBlueprintsConstruct) for simplified agent creation</li> </ul> <p>For more detailed information on Agents for Amazon Bedrock function definitions, please refer to the provided documentation and the official AWS Bedrock documentation.</p>"},{"location":"using-templates/ag-kb-guardrails/","title":"Agent blueprints for RAG, custom Action group, and guardrails","text":"Agent with Knowledge Base and Guardrails <p>This Agent Blueprint demonstrates how to create a Restaurant Assistant Agent using Amazon Bedrock, AWS CDK, and the <code>BedrockAgentBlueprintsConstruct</code>. It showcases the integration of a knowledge base and the implementation of guardrails to ensure the agent's responses adhere to specific guidelines and content filters.</p> Quick Start: Deploying the Agent Blueprint <p>To deploy this Agent Blueprint:</p> <ol> <li>Ensure you have the AWS CDK installed and configured.</li> <li>Clone the repository containing these stacks and the BedrockAgentBlueprintsConstruct.</li> <li>Run the below code: <pre><code>cdk deploy AgentWithKBandGuardrailsStack\n</code></pre></li> </ol> <p>This single command will automatically deploy the <code>RestaurantAssistDatabaseStack</code> and the <code>AgentWithKBandGuardrailsStack</code> in the correct order, thanks to the dependency condition set up in your CDK code.</p> <p>After deployment, you can interact with the agent through the Amazon Bedrock console or API to manage restaurant bookings and access menu information.</p> Knowledge Base Integration <p>This Agent Blueprint incorporates a knowledge base to provide the agent with access to relevant information about the restaurant's menu. The knowledge base is created using the <code>AgentKnowledgeBase</code> construct, which allows you to specify the knowledge base name, an instruction for the agent, and the asset files containing the menu information.</p> <p>The <code>readMenuFiles</code> method is used to read the menu files from a specified directory and create a <code>fileBuffers</code> object containing the file contents. This object is then passed to the <code>AgentKnowledgeBase</code> construct during the knowledge base creation.</p> <p>By integrating a knowledge base, the agent can retrieve and utilize information from the menu files to assist users with inquiries related to the restaurant's offerings.</p> Guardrails Configuration <p>In addition to the knowledge base integration, this Agent Blueprint implements guardrails to ensure the agent's responses adhere to specific guidelines and content filters. The <code>BedrockGuardrailsBuilder</code> construct is used to define the guardrail configuration, which includes the following components:</p> <ol> <li>Filter Types: Specifies the types of filters to apply, such as filtering out insults or profanity.</li> <li>Managed Words: Configures the use of managed word lists, such as profanity or offensive language.</li> <li>Custom Words: Allows you to define a list of custom words or phrases to filter out.</li> <li>PII Configuration: Enables the anonymization or redaction of specific types of personally identifiable information (PII), such as social security numbers.</li> <li>Topic Configuration: Allows you to define topics or subjects that should be avoided or handled with caution.</li> </ol> <p>By implementing guardrails, you can ensure that the agent's responses are appropriate, respectful, and aligned with your content guidelines.</p> Overview <p>The blueprint consists of two main stacks and a custom construct:</p> <ol> <li>AgentWithKBandGuardrailsStack: Creates the Bedrock Agent with the associated knowledge base and guardrails.</li> <li>RestaurantAssistDatabaseStack: Sets up a DynamoDB table for storing booking information.</li> <li>BedrockAgentBlueprintsConstruct: A reusable construct for creating Bedrock Agents.</li> </ol> Key Components 1. Database Setup (RestaurantAssistDatabaseStack) <ul> <li>Creates a DynamoDB table named <code>BookingTable</code> with a partition key <code>booking_id</code> of type string.</li> <li>Configures the table for on-demand billing and sets the removal policy to destroy the table when the stack is deleted.</li> </ul> 2. Agent Creation (AgentWithKBandGuardrailsStack) <ul> <li>Defines the agent using <code>AgentDefinitionBuilder</code>:</li> <li>Sets the agent name, instructions, and foundation model.</li> <li>Creates an <code>AgentActionGroup</code> with three function definitions:</li> <li><code>get_booking_details</code>: Retrieves details of a restaurant booking.</li> <li><code>create_booking</code>: Creates a new restaurant booking.</li> <li><code>delete_booking</code>: Deletes an existing restaurant booking.</li> <li>Configures guardrails using <code>BedrockGuardrailsBuilder</code>:</li> <li>Filters out insults and profanity.</li> <li>Anonymizes social security numbers.</li> <li>Defines custom words and topics to filter or avoid.</li> <li>Creates a knowledge base using <code>AgentKnowledgeBase</code>:</li> <li>Reads menu files from a specified directory.</li> <li>Associates the knowledge base with the agent.</li> </ul> 3. BedrockAgentBlueprintsConstruct <p>This custom construct simplifies the process of creating agents for Amazon Bedrock. It handles:</p> <ul> <li>Knowledge base association and management</li> <li>Action group configuration</li> <li>Guardrails configuration</li> <li>S3 asset management for schemas and other files</li> <li>IAM role and policy setup for the agent</li> <li>Agent creation and configuration</li> </ul> How It Works <ol> <li>The <code>AgentWithKBandGuardrailsStack</code> is deployed, which automatically triggers the deployment of the <code>RestaurantAssistDatabaseStack</code> as a dependency.</li> <li>The <code>BedrockAgentBlueprintsConstruct</code> is used to:</li> <li>Create the Bedrock Agent with the defined functions and instructions</li> <li>Set up necessary IAM roles and policies</li> <li>Configure action groups, knowledge bases, and guardrails</li> <li>Handle S3 asset management for schemas and knowledge base files</li> <li>When invoked, the agent can perform various actions based on the user's input:</li> <li>Retrieve booking details</li> <li>Create a new booking</li> <li>Delete an existing booking</li> <li>If the user's input requires information from the menu, the agent can access the knowledge base to retrieve and utilize the relevant menu information.</li> <li>The agent's responses are processed through the configured guardrails, ensuring they adhere to the specified content filters and guidelines.</li> </ol> Key Features <ul> <li>Integrates a knowledge base for accessing menu information</li> <li>Implements guardrails for content filtering and adherence to guidelines</li> <li>Uses AWS CDK for infrastructure as code with automated stack dependencies</li> <li>Leverages DynamoDB for storing booking information</li> <li>Utilizes AWS Lambda for serverless execution of database operations</li> <li>Employs a reusable construct (BedrockAgentBlueprintsConstruct) for simplified agent creation</li> </ul> <p>For more detailed information on Agents for Amazon Bedrock, knowledge base integration, and guardrails, please refer to the provided documentation and the official AWS Bedrock documentation.</p>"},{"location":"using-templates/ag-roc/","title":"Agent blueprint for return of control","text":"Agent Blueprint with Return of Control <p>This Agent Blueprint demonstrates how to create an HR Assistant Agent using Amazon Bedrock, AWS CDK, and the <code>BedrockAgentBlueprintsConstruct</code>. It showcases the \"Return of Control\" feature, which allows the agent to gather information from the user and then return control to the developer for further processing.</p> Quick Start: Deploying the Agent Blueprint <p>To deploy this Agent Blueprint:</p> <ol> <li>Ensure you have the AWS CDK installed and configured.</li> <li>Clone the repository containing these stacks and the BedrockAgentBlueprintsConstruct.</li> <li>Run the below code: <pre><code>cdk deploy AgentWithROCStack\n</code></pre></li> </ol> <p>This command will deploy the AgentWithROCStack, creating the Bedrock Agent and associated resources.</p> <p>After deployment, you can interact with the agent through the Amazon Bedrock console or API to manage employee vacation time. The agent will gather the necessary information from the user and then return control to the developer for further processing.</p> What is Return of Control? <p>The \"Return of Control\" feature in Amazon Bedrock Agents allows the agent to collect information from the user and then return control to the developer for further processing, instead of directly executing an action. This is useful when you want to perform additional logic or validation on the collected data before taking an action.</p> <p>In our HR Assistant Agent, we define functions like <code>reserve_vacation_time</code> with parameters such as:</p> <ul> <li><code>employee_id</code> (integer, required)</li> <li><code>start_date</code> (string, required)</li> <li><code>end_date</code> (string, required)</li> </ul> <p>The agent will guide the conversation to collect these parameters from the user. Instead of directly executing the action, the agent will return the collected information to the developer, who can then perform additional processing or validation before confirming the vacation reservation.</p> <p>For more details on this feature, refer to the Amazon Bedrock documentation on action group executors.</p> Overview <p>The blueprint consists of two main stacks and a custom construct:</p> <ol> <li>AgentWithROCStack: Creates the Bedrock Agent with function definitions and the \"Return of Control\" feature.</li> <li>FargateAppStack: Deploys a Fargate service with a Flask application to handle the returned control from the agent.</li> <li>BedrockAgentBlueprintsConstruct: A reusable construct for creating Bedrock Agents.</li> </ol> Key Components 1. Agent Creation (AgentWithROCStack) <ul> <li>Defines the agent using <code>AgentDefinitionBuilder</code>:</li> <li>Sets the agent name, instructions, and foundation model.</li> <li>Creates an <code>AgentActionGroup</code> with two function definitions:</li> <li><code>get_available_vacation_days</code>: Retrieves available vacation days for an employee.</li> <li><code>reserve_vacation_time</code>: Collects information to reserve vacation time for an employee.</li> <li>Configures the action group executor to use the \"RETURN_CONTROL\" option, which returns the collected information to the developer instead of executing an action.</li> </ul> 2. Flask Application (FargateAppStack) <ul> <li>Creates an ECS Fargate service running a Flask application.</li> <li>The Flask application handles the returned control from the agent and performs additional processing or validation on the collected data.</li> <li>After processing, the application can take the appropriate action, such as confirming the vacation reservation in the database.</li> </ul> 3. BedrockAgentBlueprintsConstruct <p>This custom construct simplifies the process of creating agents for Amazon Bedrock. It handles:</p> <ul> <li>Knowledge base association and management</li> <li>Action group configuration</li> <li>S3 asset management for schemas and other files</li> <li>IAM role and policy setup for the agent</li> <li>Agent creation and configuration</li> </ul> How It Works <ol> <li>The AgentWithROCStack is deployed, creating the Bedrock Agent with the defined functions and the \"Return of Control\" feature.</li> <li>The FargateAppStack is deployed, creating an ECS Fargate service running a Flask application.</li> <li>When invoked, the agent uses the function definitions to guide its conversation with the user, ensuring it collects all required information.</li> <li>Instead of executing an action directly, the agent returns the collected information to the developer.</li> <li>The Flask application running on the Fargate service receives the returned control and performs additional processing or validation on the collected data.</li> <li>After processing, the Flask application can take the appropriate action, such as confirming the vacation reservation in the database.</li> </ol> Key Features <ul> <li>Implements the \"Return of Control\" feature for additional processing and validation</li> <li>Uses AWS CDK for infrastructure as code</li> <li>Leverages Amazon ECS and Fargate for running the Flask application</li> <li>Employs a reusable construct (BedrockAgentBlueprintsConstruct) for simplified agent creation</li> <li>Separates the agent logic from the application logic, allowing for more flexibility and extensibility</li> </ul> <p>For more detailed information on Agents for Amazon Bedrock, the \"Return of Control\" feature, please refer to the provided documentation and the official AWS Bedrock documentation.</p>"},{"location":"using-templates/getting-started-with-templates/","title":"Get Started with Templates","text":"Prerequisites <p>To configure the environment check Prerequisite page.</p> Installation <p>For instructions on installation check Installation page.</p> What agent blueprint are avaialble? <p>Currently, you can use the following five blueprints. The team will periorically release more blueprints as they get available.</p> <ol> <li>Agent blueprint for function definition</li> <li>Agent blueprint for return of control</li> <li>Agent blueprints for RAG, custom Action group, and guardrails</li> <li>Agent blueprints for advance prompts and lambda parser</li> <li>Agent blueprint for classification</li> </ol>"}]}